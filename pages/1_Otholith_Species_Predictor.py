import streamlit as st
from PIL import Image
import time
import numpy as np
import plotly.express as px

# --- Page Config ---
st.set_page_config(
    page_title="Otolith Species Predictor",
    page_icon="üêü",
    layout="centered"
)

# --- Custom CSS for professional look ---
st.markdown("""
    <style>
    /* Card styling */
    .prediction-card {
        background-color: #1E90FF;
        color: white;
        padding: 20px;
        border-radius: 12px;
        text-align: center;
        box-shadow: 2px 2px 15px rgba(0,0,0,0.2);
        font-size: 20px;
        font-weight: bold;
    }
    .sub-card {
        background-color: #00CED1;
        color: white;
        padding: 15px;
        border-radius: 12px;
        text-align: center;
        box-shadow: 2px 2px 10px rgba(0,0,0,0.15);
        font-size: 18px;
        font-weight: bold;
    }
    </style>
""", unsafe_allow_html=True)

st.markdown("<h1 style='text-align:center; color: #1E90FF;'>üß¨ Otolith Species & Age Predictor</h1>", unsafe_allow_html=True)
st.markdown("---")

# --- Upload Image ---
uploaded_file = st.file_uploader("Upload an Otolith Image", type=["png", "jpg", "jpeg"])

if uploaded_file:
    # Display uploaded image
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Otolith Image", use_container_width=True)
    st.markdown("---")
    
    # --- Predict button ---
    if st.button("Predict"):
        st.info("Analyzing the image...")
        
        # --- Simulate model inference ---
        with st.spinner('Predicting species and age...'):
            time.sleep(2)  # simulate processing time
            
            # Dummy predictions
            species_list = ["Clownfish", "Salmon", "Tuna", "Cod", "Mackerel"]
            predicted_age = round(np.random.uniform(1, 8), 1)  # age in years
            
            # Random confidence values for all species that sum to 100%
            random_confidences = np.random.dirichlet(np.ones(len(species_list)), size=1)[0] * 100
            confidence_dict = {species: round(conf, 1) for species, conf in zip(species_list, random_confidences)}
            
            # Predicted species = highest confidence
            predicted_species = max(confidence_dict, key=confidence_dict.get)
            predicted_confidence = confidence_dict[predicted_species]

        # --- Display predictions in professional cards ---
        st.success("Prediction Complete!")

        col1, col2 = st.columns(2)
        col1.markdown(f"<div class='prediction-card'>Predicted Species<br>{predicted_species}</div>", unsafe_allow_html=True)
        col2.markdown(f"<div class='prediction-card'>Predicted Age<br>{predicted_age} years</div>", unsafe_allow_html=True)

        st.markdown("---")
        st.subheader("Prediction Confidence for All Species")

        # Highlight predicted species in chart
        colors = ["#1E90FF" if s==predicted_species else "#D3D3D3" for s in species_list]
        fig = px.bar(
            x=list(confidence_dict.keys()),
            y=list(confidence_dict.values()),
            color=list(confidence_dict.keys()),
            color_discrete_sequence=colors,
            text=[f"{v}%" for v in confidence_dict.values()]
        )
        fig.update_layout(showlegend=False, yaxis_title="Confidence (%)", xaxis_title="Species")
        st.plotly_chart(fig, use_container_width=True)

        st.markdown("<p style='text-align:center; color: gray;'>Predictions generated by the Prototype AI Model</p>", unsafe_allow_html=True)
